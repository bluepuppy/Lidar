// FFT to select freq. bins from signal on Teensy 3.2 pin A2 (ADC input)
// Set OUT_ALARM pin high if signal in some freq. bins over threshold
// Thanks to Teensy forum users: neutronned and Frank B.
// Tuned for signal from CDM324  (24GHz doppler sensor)
// 2017-09-10: no false detect indoors in ~ 24 hours
// by J.Beale 14-SEP-2017  T3.2 96 MHz Faster


#include <Audio.h>

AudioInputAnalog         adc1;       
AudioAnalyzeFFT1024      myFFT;
AudioConnection  patchCord1(adc1, myFFT);

#define SERPORT Serial1

#define A_GAIN (9.0)    // gain applied to analog input signal
#define LED1 (13)       // onboard signal LED
#define OUT_ALARM (3)   // alarm signal (motion detected)
#define BINS 15         // how many separate frequency bins to work with
#define BIN_CUTOFF (3)    // ignore bins below this value
//#define MOTION_THRESH (10)  // sum of alarm channels reaches this value = motion detect
#define MOTION_THRESH (6)  // sum of alarm channels exceeding this value = motion detect
#define PEAK_THRESH (4)  // largest bin must reach this value
#define DECRATIO (8)    // decimation ratio (data processed / printed out)
#define MINRUN (15)    // minimum # of cycles of motion before validated (displayed)
#define MINSTOP (20)    // max # of cycles of no-motion before reset
#define CB_LEN (20)    // number of elements in circular buffer

#define UC unsigned char
#define UI unsigned int

#define MAX(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a > _b ? _a : _b; })  // this form used to avoid a double-evaluation problem

#define MIN(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a < _b ? _a : _b; })  // this form used to avoid a double-evaluation problem

     
#define FBINS 512    // full length of frequency data from 1024-point FFT
#define MINBOUND -100 // what log(0) becomes; should be at the noise floor, whatever that is

// #define HISTBINS 50    // how many bins in background frequency histogram
#define FSCALEFAC 2  // histogram index scaling factor
#define FFSCALE (1000) // scaling factor for full FFT spectrum results
#define FFTHRESH (0.26) // full FFT element must exceed this threshold for motion signal
#define LOGSCALE (8.6859)  // scale factor converting ln(x) to 20*log10(x)  (dB units)

// fslice is one element describing frequency spectrum with a few float values, at one timeslice
struct fslice {
  UI  len;  // how many time slices since motion started
  float fCenter;  // center-of-mass of frequency distribution
  float moment;   // proportional to spread of detected (above-thresh) frequencies
  float mag;  // magnitude of detected signal
} cbuf[CB_LEN];  // circular buffer of timeslice info

int CB_head=CB_LEN;
int CB_tail=0;
int CB_elems=0;

UC alarm[BINS];  // by what factor each bin exceeds threshold (0 = no alarm)
char buf[20];    // temporary string buffer for print output
int didx=0;   // index into history buffer
UI ms; // current value of milliseconds
UI oldms = 0;  // previous loop value of msec
UI dt;     // delta-time (loop time) in msec


int sumAlarm;  // sum of all alarm[i] bins, 0 if no alarm
int iMax;      // index of bin with maximum 'Alarm' value

boolean motion = false;  // true if motion detected by alarm sum > MOTION_THRESH
boolean motionOld;  // motion value at previous timestep
boolean event = false;  // if currently in an event
boolean pevent = false;  // if we are currently printing out an event
boolean lastEvent = false; // if last cycle was an event
boolean firstPrint; // if this is the first line of motion data printed out
UI runLength = 0;   // how many readings in a row "motion" has been detected
UI stopLength = 0;  // how many readings in a row there's been no motion
UI lastRun = 0;     // runlength duration of previous event 
UI maxRun = 0;                // actual length of this event
UI printLen = 0;    // how many buffered lines of data printed for this event
float maxAmp=0;  // peak amplitude of motion event
float avgAmp=0;  // average amplitude of motion event
float domFreq=0;  // center frequency at moment of peak amplitude of motion event
UI domStep=0;  // timestep offset at moment of peak amplitude of motion event


static float fa = 0.1;  // smoothing fraction for low-pass filter
static float fb = 0.0005;  // smoothing fraction for long-term avg filter
static float fc = 0.3;     // smoothing fraction for center frequency
static float fmom = 0.4;  // moment smoothing
static float fmom2 = 0.35;  // moment smoothing
static float fmag = 0.4;  // magnitude smoothing



// static float aThresh = 0.17;      // amount by which current value must exceed long-ter avg. for alarm
// static float aThresh = 0.3;      // amount by which current value must exceed long-ter avg. for alarm (HB100)
static float aThresh = 0.20;      // amount by which current value must exceed long-ter avg. for alarm (CDM324)


unsigned int loops = 0;   // how many times through processing loop
unsigned int pcnt = 0;  // how many times through printout loop


float favg[FBINS];   // accumulated long-term average spectrum
float fsig[FBINS];   // motion signal spectrum = raw spectrum - long-term-average spectrum
float fMax;          // peak spectral value
int fiMax;           // index of peak value

float fCenter;  // center of mass of distribution
float fCenterSM1=0;  // center of mass of distribution
float fCenterSM2=0;  // center of mass of distribution

static float spMax = 40;  // accumulate avg freq when spread less than this
static float magMin = 20; // accumulate avg freq when magnitude greater than this
float freqAvg=0;     // average frequency of entire motion event
int freqCount=0;         // count of how many freqAvg elements were summed

float moment = 0;  // moment of inertial about the center of mass, of signal spectrum
float momentSM = 0;  // smoothed version of moment of inertial
float momentSM2 = 0;  // smoothed version of moment of inertial
float oldmom3 = 0;    // value of momentSM2 during previous loop
float momentSM3 = 0;  // smooth #3
float momentSM4 = 0;  // smooth #4
UC    momvel;         // sign of moment slope (0 or 1 = + or -_
float mombase;        // base offset to subtract from moment
float oldmv;          // previous velocity
float fTotal;      // sum of all FFT elements 
float fSigTotal;   // sum of all detected-motion signals (above background average)
float fSigSM;      // smoothed fSigTotal

// UC fHist[HISTBINS][FBINS];  // histogram of freq data to establish background thresholds
// unsigned char fHist[32][512];  // histogram of freq data to establish background thresholds


void setDACFreq(int freq) {  // change sampling rate of internal ADC and DAC
const unsigned config = PDB_SC_TRGSEL(15) | PDB_SC_PDBEN | PDB_SC_CONT | PDB_SC_PDBIE | PDB_SC_DMAEN;
    PDB0_SC = 0; //<--add this line
    PDB0_IDLY = 1;
    PDB0_MOD = round((float)F_BUS / freq ) - 1;    
    PDB0_SC = config | PDB_SC_LDOK;
    PDB0_SC = config | PDB_SC_SWTRIG;
    PDB0_CH0C1 = 0x0101;    
}

#define FSTEP(a,b,f) ( (1.0-f)*a + (f*b) )  // interpolate between (a,b) by fraction f
// =========================================================================
void pbuf()  // print out all the elements of circular buffer
{
  char buf[80];
  
    sprintf(buf,"elems:%d head:%d tail: %d  ",CB_elems, CB_head, CB_tail);
    SERPORT.print(buf);
    for (int i =0; i<CB_LEN; i++) {
      sprintf(buf,"%d:%d,%4.2f ",i,cbuf[i].len,cbuf[i].mag);
      SERPORT.print(buf);
    }
    SERPORT.println();
}

void push(fslice a) // push one element into head of buffer
{
    if (++CB_head >= CB_LEN) CB_head=0; // max ptr is (CB_LEN-1)
    if (CB_elems == CB_LEN) {
      if (++CB_tail >= (CB_LEN)) CB_tail=0; // max ptr is (CB_LEN-1)
    }
    if (CB_elems < CB_LEN) CB_elems++;  // add one to total count
    cbuf[CB_head].len = a.len;
    cbuf[CB_head].fCenter = a.fCenter;
    cbuf[CB_head].moment = a.moment;
    cbuf[CB_head].mag = a.mag;
}


int pop()  // pop one element from rear of buffer. Returns an INDEX into cbuf[i] array
{
    int oldtail;
    if (CB_elems == 0) {
      return -1; // error to pop empty buffer
    }
    
    oldtail = CB_tail;
    CB_elems--;
    if (++CB_tail > (CB_LEN-1)) CB_tail = 0;
    return oldtail;
} // pop()

// =========================================================================
void updateAvgFull(float frac) {

// parameter 'frac' is long-term smoothing fraction (frac very small => very long-term avg.)

// Key: needs a well-chosen "threshold" factor above long-term average to count as a motion signal
// Single factor, parametric curve, or per-element lookup table?  How to determine?
//
// This function calculates:
//   fMax      (peak value of detected signal spectrum)
//   fiMax     (peak frequency of detected signal spectrum)
//   fTotal    (total of in raw spectrum)
//   fSigTotal (total of detected motion signal, 0 if all is average or below)
//   fCenter   (center frequency of detected signal spectrum, as an overall center-of-mass)
//   moment    (how spread-out in frequency the spectral data is)
//   momentSM  (smoothed / low-pass filtered version of moment)
  
  float fv;  // temporary float value of current spectral element
  float fsignal;  // signal = spectral element after background subtraction

  fTotal = 0;     // total signal in log space
  fSigTotal = 0;  // total detected (motion) signal
  fCenter = 0;
  fiMax = 0;
  fMax = 0.0;
  for (int i=0; i<FBINS; i++) {
      fv = FFSCALE * myFFT.read(i);    
      
      fTotal += fv;              // sum of raw spectral signal values
      if (!motion) {  // if there is no motion detected currently, update long-term average
        favg[i] = FSTEP(favg[i], fv, frac);  
      }
      fsignal = MAX( (fv - (favg[i] + FFTHRESH)) , 0);  // fsignal is always 0 or +.  0 if current value at or below average
      fSigTotal += fsignal;            // total detected signal (0 if all at or below average)
      
      fCenter += fsignal * ((float)i + 0.5);  // sum over all spectrum to find center-of-mass

      /*
      int j = fsignal * FSCALEFAC;  // very magical constant scale factor
      if (j > (HISTBINS-1)) j=HISTBINS-1; // make sure not to exceed a valid array index value
      // ---------------------------------------      
      if (!motion && (fsignal>0)) {  // update frequency histogram of "motion signal"
        if (fHist[j][i] < 255) fHist[j][i]++;  // histogram of freq data to establish background thresholds
      }
      // ---------------------------------------
      */
      
       
      if (fsig[i] > fMax) {   // have we found a new maximum?
        fMax = fsig[i];
        fiMax = i;
      }
      fsig[i] = fsignal;  // save this "detected signal" element of the spectrum
  } // end for (i..)
  fSigSM = FSTEP(fSigSM, fSigTotal, fmag); // smoothed version of signal magnitude
  if (fSigTotal > 0)
    fCenter /= (fSigTotal);  // this is the (non-integer) index value of "center of mass" of the spectrum
  else
    fCenter = 0;

  fCenterSM1 = FSTEP(fCenterSM1, fCenter, fc);  // update smoothed value
  fCenterSM2 = FSTEP(fCenterSM2, fCenterSM1, fc);  // update smoothed value
    
  moment = 0;  // moment of inertial about the center of mass, of signal spectrum
  for (int i=0; i<FBINS; i++) {
      float r=i;  // "radius" from center of mass of the spectrum
      moment += sqrt(fsig[i] * (r-fCenter)*(r-fCenter) );  // sqrt(moment) = Sum(m * r^2)    
  } // for(i..)  
  moment = MIN(moment/20.0, 100);  // arbitrary scaling and clamp value
  momentSM = FSTEP(momentSM, moment, fmom);  // update smoothed value
  momentSM2 = FSTEP(momentSM2, momentSM, fmom);  // update smoothed value #2
  momentSM3 = FSTEP(momentSM3, momentSM2, fmom);  // update smoothed value #3
  // momentSM4 = FSTEP(momentSM4, momentSM3, fmom2);  // update smoothed value #3
  if (momentSM3 > oldmom3) momvel = 1;  // calculate sign of moment velocity (increasing or decreasing?)
    else momvel = 0;
  if ( momvel==1 && oldmv==0 ) {  // just changed from down to up
    // mombase = oldmom3;
    mombase = momentSM3;
  }
  momentSM4 = momentSM3 - mombase;
  oldmv = momvel;
  oldmom3 = momentSM3;
} // end updateAvgFull()
// =========================================================================



// ==========================================
void setup() {
int i;

  AudioMemory(12);
  AudioNoInterrupts();
  setDACFreq(11025);
  // setDACFreq(25245); // 11.025 kHz * (24.1/10.525) = 25.245 kHz
  myFFT.windowFunction(AudioWindowHanning1024);
  // analogReference(EXTERNAL);  // set ADC voltage reference to 3.3V external
  AudioInterrupts();
  
  SERPORT.begin(19200);
  
  digitalWrite(LED1, false);
  pinMode(LED1, OUTPUT);
  digitalWrite(OUT_ALARM, false);
  pinMode(OUT_ALARM, OUTPUT);
  digitalWrite(LED1, true);
  digitalWrite(OUT_ALARM, true);
  delay(1000);

  // SERPORT.print("# log(10.0) = ");
  // SERPORT.println(log(10.0),5);
  SERPORT.println("count,freq,spread,strength");
  SERPORT.println("# Doppler FFT Motion-Detect on Teensy 3.2 ver 1.62 14-SEP-2017");
  
  digitalWrite(LED1, false);
  digitalWrite(OUT_ALARM, false);
  runLength = 0;
  stopLength = 0;
  momentSM = 0;  // smoothed value of moment of detected spectrum

  for (i = 0; i<4; i++) do {} while (!myFFT.available());  // wait for FFT values to be ready  
  // updateLevel(1.0);  // initialize frequency values with instantaneous ones
  // updateAverage(1.0);  // initialize long-term average
  updateAvgFull(1.0);

  SERPORT.print("# ");
  for (i=0; i<50; i++) {  // do a few rounds of averaging
    while (!myFFT.available());
    SERPORT.print(".");
    updateAvgFull(fa/2.0);  // start long-term averaging
  }
  SERPORT.println("");
  SERPORT.println("# Starting now");

  firstPrint = false;
  firstPrint = false;
  motionOld = false;

} // end setup()

// ===================================================================================
void loop() {
  int i;
  boolean tail = false;
  boolean mt;  // motion OR (tailend condition)
  fslice a;    // struct holding current "now" timeslice parameters
  char buf[80];  // temporary output string
  
  if (myFFT.available()) {
    ms = millis();
    dt = ms - oldms;  // how long one loop takes
    oldms = ms;

    updateAvgFull(fb);    // do stats on long-term-average of every element in full spectrum

    // "motion detected" when (sigMag > 0)
    // float sigMag = LOGSCALE * MAX(-0.5+log(fSigTotal), 0);  // magnitude in dB
    float sigMag = LOGSCALE * MAX(-0.5+log(fSigSM), 0);  // * LOGSCALE gives magnitude in dB

    a.len = runLength; // how many time slices since motion
    a.fCenter = fCenterSM2;  // center of mass of detected signal in freq spectrum
    a.moment = momentSM3;  // moment or "spread" of det. signal
    a.mag = sigMag;  // magnitude (amplitude) of det.signal
    push(a);  // save current timeslice data in circular buffer (whether any motion, or not)
    // sprintf(buf,"%d,%d ",runLength,stopLength);
    // SERPORT.print(buf); // DEBUG: show run,stop counts
    // SERPORT.println();
    
    motion = (sigMag > 0) & (fCenter > 0);
    if (motion) {
      stopLength = 0;  // stopLength is 0 immediately upon any motion
      runLength++;     // count how many timesteps this "run" of motion lasts
    } else {
      if (++stopLength > MINSTOP) {
        if (runLength > MINRUN) maxRun = runLength;  // remember length of just-ended motion run
        runLength = 0;  // reset runlength if too much time has passed since motion
      }
    }

    if ( motion && (runLength > (MINRUN+2)) ) {
      event = true;
      // SERPORT.print(runLength);
      // SERPORT.print(", ");
    } else {
      event = false;
    }

    if ( event == true ) {  // show data during motion, and X timesteps after
      pevent = true;
    } 
    
    if (pevent && (stopLength > MINSTOP) && (printLen > maxRun+5)) {  // when to turn off printing
      pevent = false;
    }

    if (pevent) {  // show data during motion, and X timesteps after

      printLen++;  // track how many timesteps we have printed out
      int idx = pop(); // index into cbuf[] array of frequency slice data structures
      float amp = cbuf[idx].mag; // signal magnitude at idx mark
      if (amp > maxAmp) {  // if it's a new peak, remember magnitude & dominant frequency & time offset
        maxAmp = amp;
        domFreq = cbuf[idx].fCenter;
        domStep = cbuf[idx].len;
      }
      if (( cbuf[idx].mag > magMin) && (cbuf[idx].moment < spMax)) {
        avgAmp += cbuf[idx].mag;
        freqAvg += cbuf[idx].fCenter;
        freqCount++;
      }
      
      sprintf(buf,"%03d,%5.2f,%5.2f,%5.2f", cbuf[idx].len, cbuf[idx].fCenter,
          cbuf[idx].moment, cbuf[idx].mag);      
      SERPORT.print(buf);  //  center of mass of spectrum
      SERPORT.println();  // blank line separates events
    } else {             // here we know (event == false)
      // runLength = 0;
      if (lastEvent) {  // just finished previous event ?
        // SERPORT.println(runLength);
        lastRun = 0;  // flag to indicate already printed
        if (freqCount > 0) {
          freqAvg /= freqCount;     // convert freq sum to average
          avgAmp /= freqCount;      // convert amplitude sum to average
        }
        SERPORT.println("# maxRun, domStep, freqCount, domFreq, freqAvg, maxAmp, avgAmp");
        sprintf(buf,"## %d, %d, %d, %5.2f, %5.2f, %5.2f, %5.2f", maxRun, domStep, freqCount, domFreq, freqAvg, maxAmp, avgAmp);
        SERPORT.print(buf);
        SERPORT.println();  // blank line separates events
        maxRun = 0;  // runlength of motion event
        maxAmp=0;  // peak amplitude of motion event
        avgAmp=0;  // average amplitude of motion event
        domFreq=0;  // center frequency at moment of peak amplitude of motion event
        domStep=0;  // timestep offset of peak amplitude
        printLen = 0;  // ended this event printout
        freqAvg=0;     // average frequency of entire motion event
        freqCount=0;         // count of how many freqAvg elements were summed
        runLength = 0;  // ONLY PLACE runlength reset: after event printout finished
      }
    }


    digitalWrite(OUT_ALARM, motion);
    // digitalWrite(LED1, motion);  // onboard LED current adds noise?    

    lastEvent = pevent;  // remember if we are now printing out event, for next cycle
  
  } // if (myFFT.available...)
  
} // end main loop()

